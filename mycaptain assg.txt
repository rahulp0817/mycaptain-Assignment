#Implement methods of list data structure. Assignment - 1

1.append()

list = [1, 2, 4, "Mango", "Apple"]
list.append("Orange")
print(list)

OUTPUT = [1, 2, 4, "Mango", "Apple", "Orange"]

2.clear()

list = [1, 2, 4, "Mango", "Apple"]
list.clear()
print(list)

OUTPUT = []

3.pop()

list = [1, 2, 4, "Mango", "Apple"]
list.pop()
print(list)

OUTPUT = [1, 2, 4, "Mango"]

4.insert()

list = [1, 2, 4, "Mango", "Apple"]
list.insert(3, 21)
print(list)

OUTPUT = [1, 2, 4, 21, "Mango", "Apple"]

5.remove()

list = [1, 2, 4, "Mango", "Apple"]
list.remove("Mango")
print(list)

OUTPUT = [1, 2, 4, 21, "Apple"]

6.count()   (....)

list = [1, 2, 4, "Mango", "Apple"]
print(list.count("Mango"))

OUTPUT = 1

7.sort()

list = [1, 6, 4]
list.sort()
print(list)

OUTPUT = [1, 2, 6]

8.copy()    (.....)

list = [1, 2, 4, "Mango", "Apple"]
print(list.count("Mango"))

OUTPUT = [1, 2, 4, "Mango", "Apple"]

9.extend()

list = [1, 2, 4, "Mango", "Apple"]
cars = ['Ford', 'BMW', 'Volvo']
list.extend(cars)

OUTPUT = [1, 2, 4, "Mango", "Apple", 'Ford', 'BMW', 'Volvo']

10.index()

list = [1, 2, 4, "Mango", "Apple"]
list.index("Mango"))

OUTPUT = 3

11.reverse()

list = [1, 2, 4, "Mango", "Apple"]
list.reverse()

OUTPUT = ['Apple', 'Mango', 4, 2, 1]

# About Tuples

Tuples are used to store multiple items in a single variable. Tuple is one of 4 built-in data types in Python used to store collections of data, the other 3 are List, Set, and Dictionary, all with different qualities and usage. A tuple is a collection which is ordered and unchangeable.
It is written with round brackets.

example:
   mytuple = ("apple", "banana", "cherry")
   print(mytuple)



------------------------------------------------------------------------------------------
Assignment 2


1.Complete Methods of Dictionary From w3schools:

  Methods are:

i)clear()
  
  It clears all the elements.

eg:

Fruits = {
   "type" : "Orange"
   "colour" : "orange"
   "shape" : "circle"
}
 Fruits.clear()
 print(Fruits) 

Output: {}


ii)copy()
 
 It basically copy the dictionary.

eg:

Fruits = {
   "type" : "Orange"
   "colour" : "orange"
   "shape" : "circle"
}
 Fruits.copy()
 print(Fruits) 

Output: { "type" : "Orange", "colour" : "orange", "shape" : "circle"}

iii)fromKeys()

  The fromkeys() method returns a dictionary with the specified keys and the specified value.

eg:

x = ('key1', 'key2', 'key3')
y = 0,1

dict = dict.fromkeys(x, y)
print(dict)

Output: {'key1': (0, 1), 'key2': (0, 1), 'key3': (0, 1)}

iv)get()

  Returns the value of a specified key

eg:

Fruits = {
   "type" : "Orange"
   "colour" : "orange"
   "shape" : "circle"
}
 x = Fruits.get("colour")
 print(x) 

Output: orange

v)items()

  Returns a list containing a tuple for each key value pair

eg:


Fruits = {
   "type" : "Orange"
   "colour" : "orange"
   "shape" : "circle"
}
 x = Fruits.items()
 print(x) 

Output: dict_items([('type', 'Orange'), ('colour', 'Orange'), ('shape', "circle")])

vi)Keys()

  Returns all the keys in the dictionary

eg:

 Fruits = {
   "type" : "Orange"
   "colour" : "orange"
   "shape" : "circle"
}
 x = Fruits.keys()
 print(x) 

Output: dict_keys(['type', 'colour', 'shape'])

vii)pop()

  It removes the the specified element which we want to remove

eg:

Fruits = {
   "type" : "Orange"
   "colour" : "orange"
   "shape" : "circle"
}
 x = Fruits.pop("shape")
 print(x) 

Output: {'type':'Orange', 'colour':'Orange'}

viii)popitem
  
   It removes the last item

eg:

Fruits = {
   "type" : "Orange"
   "colour" : "orange"
   "shape" : "circle"
}
 x = Fruits.popitem()
 print(x) 

Output: {'type':'Orange', 'colour':'Orange'}

ix)setdefault()

  It returns the value of a specified keys

eg: 

Fruits = {
   "type" : "Orange"
   "colour" : "orange"
   "shape" : "circle"
}
 x = Fruits.setdefault("type", "Apple")
 print(x) 

Output:Orange

x)update()

  Updates the dictionary with the specified key-value pairs

eg:


Fruits = {
   "type" : "Orange"
   "colour" : "orange"
   "shape" : "circle"
}
 x = Fruits.update({"type": "Apple"})
 print(x)
 
Output: {'type':'Apple', 'colour':'Orange', 'shape':'circle'}

xi)values()

  Returns a list of all the values in the dictionary

eg:

Fruits = {
   "type" : "Orange"
   "colour" : "orange"
   "shape" : "circle"
}
 x = Fruits.values()
 print(x)
 
Output: dict_values(['Orange', 'Orange', 'circle'])



2.COMPLETE METHODS OF STRINGS:

i) capitalize()
   
     Converts the first character to upper case

  
ii) casefold()	

    Converts string into lower case

iii) center()

	Returns a centered string
iv) count()	

        Returns the number of times a specified value occurs in a string

v) encode()

     	Returns an encoded version of the string

vi) endswith()	
 
        Returns true if the string ends with the specified value

vii) expandtabs()

	Sets the tab size of the string

viii) find()

	Searches the string for a specified value and returns the position of where it was found

ix) format()

	Formats specified values in a string

x) format_map()	

        Formats specified values in a string

xi) index()

	Searches the string for a specified value and returns the position of where it was found


xii) lower()	

        Converts a string into lower case
xiii) lstrip()	

        Returns a left trim version of the string

xiv) maketrans()

	Returns a translation table to be used in translations

xv) partition()	

        Returns a tuple where the string is parted into three parts

xvi) replace()	

        Returns a string where a specified value is replaced with a specified value

xvii) split()	

        Splits the string at the specified separator, and returns a list

xviii) splitlines()	

        Splits the string at line breaks and returns a list

xix) startswith()	

        Returns true if the string starts with the specified value

xx) strip()	

        Returns a trimmed version of the string

xxi) swapcase()	

        Swaps cases, lower case becomes upper case and vice versa

xxii) title()	

        Converts the first character of each word to upper case

xxiii) translate()	
       
        Returns a translated string

xxiv) upper()	
        
        Converts a string into upper case





